/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/*
 *  Created on: Aug 23, 2024
 *      Author:  AbdelRahman Matarawy
 */
#include "STM32F103C6_EXTI_Driver.h"

uint8_t IRQ_Flag;



void EXTI_CallBack(void)
{
	IRQ_Flag = 1;
}

enum CPU_AccessLevel{
	privileged,
	unprivileged
};

void Switch_CPU_AccessLevel(enum CPU_AccessLevel LEVEL)
{
	switch(LEVEL)
	{
	case privileged:
		/* Clear Bit 0 in CONTROL register */
		__asm("MRS R3, CONTROL 		\n\t"	// Store value of Control register to R3
				"LSR R3, R3, #0x01  \n\t"	// Shift R3 to right to remove bit 0
				"LSL R3, R3, #0x01	\n\t"	// Shift R3 to left to clear bit 0
				"MSR CONTROL, R3"); 		// load R3 value to Control Register after edit value of bit 0
		break;
	case unprivileged:
		/* Set Bit 0 in CONTROL register */
		__asm("MRS R3, CONTROL \n\t" 		// Store value of Control register to R3
				"orr R3, R3, #0x01 \n\t" 	// Set bit 0
				"MSR CONTROL, R3"); 		// load R3 value to Control Register after edit value of bit 0
		break;
	}
}

//clk configuration
void clk_init()
{
	RCC_GPIOB_CLK_EN();
	RCC_AFIO_CLK_EN();
}

int main(void)
{
	clk_init();
	/* Set Configuration of EXTI */
	EXTI_Config_t EXTI_Conf;  // Make Variable of EXTI_PinConfig_t structure
	EXTI_Conf.EXTI_PIN = EXTI_LINE9_PA9; // Set line 9, GPIOB, Pin9 an EXTI
	EXTI_Conf.Trigger_Case = EXTI_Trigger_RASING; // Specifies Rising Trigger
	EXTI_Conf.IRQ_Case =EXTI_IRQ_Enable; // Enable Interrupt Mask
	EXTI_Conf.P_IRQ_CallBack = EXTI_CallBack; // Make Call Back Function point to ISR

	MCAL_EXTI_GPIO_Init(&EXTI_Conf);
	IRQ_Flag = 1;

	/* When Try to test our function first make it unprivileged
	 *  since main work as thread mode which is PAL */
	Switch_CPU_AccessLevel(unprivileged);
	Switch_CPU_AccessLevel(privileged);
	while(1)
	{
		if(IRQ_Flag == 1)
		{
			IRQ_Flag = 0;
		}

	}
}
