
Lecture4.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000960  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  4 .ARM          00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a9c  08000aa4  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aa0  08000aa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000aa4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000aa4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002389  00000000  00000000  00010acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000692  00000000  00000000  00012e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  000134e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00013628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020d4  00000000  00000000  00013730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012f9  00000000  00000000  00015804  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009565  00000000  00000000  00016afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003e8  00000000  00000000  000200e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a78 	.word	0x08000a78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a78 	.word	0x08000a78

08000170 <Enable_NVIC>:
 * ===============================================================================
 * 							Generic Functions
 * ===============================================================================
 */
void Enable_NVIC(uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800020f 	.word	0x0800020f
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable();
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable();
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable();
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable();
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable();
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
	case 6:
	case 7:
	case 8:
	case 9:
	case 10:
		NVIC_IRQ23_EXTI5_9_Enable();
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI9_15_Enable();
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e110 	.word	0xe000e110

0800023c <Disable_NVIC>:


void Disable_NVIC(uint16_t IRQ)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002db 	.word	0x080002db
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable();
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
		break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable();
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
		break;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable();
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
		break;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable();
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
		break;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable();
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
		break;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
	case 6:
	case 7:
	case 8:
	case 9:
	case 10:
		NVIC_IRQ23_EXTI5_9_Disable();
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
		break;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI9_15_Disable();
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
		break;
 80002f4:	bf00      	nop
	}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e300 	.word	0xe000e300
 8000304:	e000e310 	.word	0xe000e310

08000308 <Update_EXTI>:



void Update_EXTI(EXTI_Config_t *EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	/* 1- Config GPIO to be AF input (Floating input) */
	GPIO_PinConfig_t pinconf;
	pinconf.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000310:	2301      	movs	r3, #1
 8000312:	72bb      	strb	r3, [r7, #10]
	pinconf.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	b29b      	uxth	r3, r3
 800031a:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_INIT(EXTI_Config->EXTI_PIN.GPIO_Port, &pinconf);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	4611      	mov	r1, r2
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fa71 	bl	800080e <MCAL_GPIO_INIT>
	//=========================================================

	/* 2- Update AFIO to route EXTI Line with PORT A, B, C, D */
	// Calculate Index to determine each EXTICRx will use and Calc Position to be aware with PORT A,B,... which help in shifting in Reg.
	uint8_t AFIO_AFIO_EXTICR_Index = ((EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) / 4); // uint so it take integer value only
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_AFIO_EXTICR_Position = ((EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) % 4) * 4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	f003 0303 	and.w	r3, r3, #3
 800033c:	b2db      	uxtb	r3, r3
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	73bb      	strb	r3, [r7, #14]

	// Clear the four bit before write on them
	AFIO->EXTICR[AFIO_AFIO_EXTICR_Index] &= ~(0xF << AFIO_AFIO_EXTICR_Position);
 8000342:	4a61      	ldr	r2, [pc, #388]	; (80004c8 <Update_EXTI+0x1c0>)
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	3302      	adds	r3, #2
 8000348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034c:	7bbb      	ldrb	r3, [r7, #14]
 800034e:	210f      	movs	r1, #15
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	4618      	mov	r0, r3
 8000358:	495b      	ldr	r1, [pc, #364]	; (80004c8 <Update_EXTI+0x1c0>)
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	4002      	ands	r2, r0
 800035e:	3302      	adds	r3, #2
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Write on this index and this position value of PORT
	AFIO->EXTICR[AFIO_AFIO_EXTICR_Index] |= (AFIO_GPIO_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) << AFIO_AFIO_EXTICR_Position);
 8000364:	4a58      	ldr	r2, [pc, #352]	; (80004c8 <Update_EXTI+0x1c0>)
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	3302      	adds	r3, #2
 800036a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	4956      	ldr	r1, [pc, #344]	; (80004cc <Update_EXTI+0x1c4>)
 8000374:	428b      	cmp	r3, r1
 8000376:	d016      	beq.n	80003a6 <Update_EXTI+0x9e>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4954      	ldr	r1, [pc, #336]	; (80004d0 <Update_EXTI+0x1c8>)
 800037e:	428b      	cmp	r3, r1
 8000380:	d00f      	beq.n	80003a2 <Update_EXTI+0x9a>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4953      	ldr	r1, [pc, #332]	; (80004d4 <Update_EXTI+0x1cc>)
 8000388:	428b      	cmp	r3, r1
 800038a:	d008      	beq.n	800039e <Update_EXTI+0x96>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4951      	ldr	r1, [pc, #324]	; (80004d8 <Update_EXTI+0x1d0>)
 8000392:	428b      	cmp	r3, r1
 8000394:	d101      	bne.n	800039a <Update_EXTI+0x92>
 8000396:	2303      	movs	r3, #3
 8000398:	e006      	b.n	80003a8 <Update_EXTI+0xa0>
 800039a:	2300      	movs	r3, #0
 800039c:	e004      	b.n	80003a8 <Update_EXTI+0xa0>
 800039e:	2302      	movs	r3, #2
 80003a0:	e002      	b.n	80003a8 <Update_EXTI+0xa0>
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <Update_EXTI+0xa0>
 80003a6:	2300      	movs	r3, #0
 80003a8:	7bb9      	ldrb	r1, [r7, #14]
 80003aa:	408b      	lsls	r3, r1
 80003ac:	4618      	mov	r0, r3
 80003ae:	4946      	ldr	r1, [pc, #280]	; (80004c8 <Update_EXTI+0x1c0>)
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	4302      	orrs	r2, r0
 80003b4:	3302      	adds	r3, #2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=========================================================

	/* 3- Update Raising and Falling Edge */
	// Clear Raising and Falling before add value
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003ba:	4b48      	ldr	r3, [pc, #288]	; (80004dc <Update_EXTI+0x1d4>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7812      	ldrb	r2, [r2, #0]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a43      	ldr	r2, [pc, #268]	; (80004dc <Update_EXTI+0x1d4>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003d2:	4b42      	ldr	r3, [pc, #264]	; (80004dc <Update_EXTI+0x1d4>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <Update_EXTI+0x1d4>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	60d3      	str	r3, [r2, #12]

	// Start update
	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RASING)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7b1b      	ldrb	r3, [r3, #12]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d10b      	bne.n	800040a <Update_EXTI+0x102>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003f2:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <Update_EXTI+0x1d4>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7812      	ldrb	r2, [r2, #0]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	4611      	mov	r1, r2
 8000402:	4a36      	ldr	r2, [pc, #216]	; (80004dc <Update_EXTI+0x1d4>)
 8000404:	430b      	orrs	r3, r1
 8000406:	6093      	str	r3, [r2, #8]
 8000408:	e029      	b.n	800045e <Update_EXTI+0x156>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7b1b      	ldrb	r3, [r3, #12]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d10b      	bne.n	800042a <Update_EXTI+0x122>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000412:	4b32      	ldr	r3, [pc, #200]	; (80004dc <Update_EXTI+0x1d4>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a2e      	ldr	r2, [pc, #184]	; (80004dc <Update_EXTI+0x1d4>)
 8000424:	430b      	orrs	r3, r1
 8000426:	60d3      	str	r3, [r2, #12]
 8000428:	e019      	b.n	800045e <Update_EXTI+0x156>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RASING_FALLING)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7b1b      	ldrb	r3, [r3, #12]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d115      	bne.n	800045e <Update_EXTI+0x156>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000432:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <Update_EXTI+0x1d4>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7812      	ldrb	r2, [r2, #0]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a26      	ldr	r2, [pc, #152]	; (80004dc <Update_EXTI+0x1d4>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <Update_EXTI+0x1d4>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	4611      	mov	r1, r2
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <Update_EXTI+0x1d4>)
 800045a:	430b      	orrs	r3, r1
 800045c:	60d3      	str	r3, [r2, #12]
	}
	//=========================================================

	/* 4- Update IRQ Handling CallBack */

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <Update_EXTI+0x1d8>)
 800046a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//=========================================================

	/* 5- Enable/Disable IRQ and NVIC */
	if(EXTI_Config->IRQ_Case == EXTI_IRQ_Enable)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	7b5b      	ldrb	r3, [r3, #13]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d111      	bne.n	800049a <Update_EXTI+0x192>
	{
		EXTI->IMR |= 1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber;
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <Update_EXTI+0x1d4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7812      	ldrb	r2, [r2, #0]
 800047e:	4611      	mov	r1, r2
 8000480:	2201      	movs	r2, #1
 8000482:	408a      	lsls	r2, r1
 8000484:	4611      	mov	r1, r2
 8000486:	4a15      	ldr	r2, [pc, #84]	; (80004dc <Update_EXTI+0x1d4>)
 8000488:	430b      	orrs	r3, r1
 800048a:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe6c 	bl	8000170 <Enable_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 8000498:	e011      	b.n	80004be <Update_EXTI+0x1b6>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <Update_EXTI+0x1d4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	7812      	ldrb	r2, [r2, #0]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <Update_EXTI+0x1d4>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff febf 	bl	800023c <Disable_NVIC>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010000 	.word	0x40010000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40011400 	.word	0x40011400
 80004dc:	40010400 	.word	0x40010400
 80004e0:	2000001c 	.word	0x2000001c

080004e4 <MCAL_EXTI_GPIO_Init>:
 * @param [in]	 : EXTI_Config -> set by #ref EXTI_Define, EXTI_Trigger_Define, EXTI_IRQ_Difne
 * @retval		 : None
 * Note			 : None
 */
void MCAL_EXTI_GPIO_Init(EXTI_Config_t *EXTI_Config)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ff0b 	bl	8000308 <Update_EXTI>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <EXTI0_IRQHandler>:
 * ===============================================================================
 * 									ISR Functions
 * ===============================================================================
 */
void EXTI0_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* Clear Pending Register */
	EXTI->PR |= 1<<0;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <EXTI0_IRQHandler+0x1c>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <EXTI0_IRQHandler+0x1c>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6153      	str	r3, [r2, #20]
	/* Call IRQ */
	GP_IRQ_CallBack[0]();
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI0_IRQHandler+0x20>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4798      	blx	r3
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40010400 	.word	0x40010400
 800051c:	2000001c 	.word	0x2000001c

08000520 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* Clear Pending Register */
	EXTI->PR |= 1<<1;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <EXTI1_IRQHandler+0x1c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <EXTI1_IRQHandler+0x1c>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6153      	str	r3, [r2, #20]
	/* Call IRQ */
	GP_IRQ_CallBack[1]();
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <EXTI1_IRQHandler+0x20>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	4798      	blx	r3
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010400 	.word	0x40010400
 8000540:	2000001c 	.word	0x2000001c

08000544 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	/* Clear Pending Register */
	EXTI->PR |= 1<<2;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI2_IRQHandler+0x1c>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI2_IRQHandler+0x1c>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6153      	str	r3, [r2, #20]
	/* Call IRQ */
	GP_IRQ_CallBack[2]();
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <EXTI2_IRQHandler+0x20>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4798      	blx	r3
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010400 	.word	0x40010400
 8000564:	2000001c 	.word	0x2000001c

08000568 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	/* Clear Pending Register */
	EXTI->PR |= 1<<3;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI3_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI3_IRQHandler+0x1c>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6153      	str	r3, [r2, #20]
	/* Call IRQ */
	GP_IRQ_CallBack[3]();
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI3_IRQHandler+0x20>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4798      	blx	r3
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	2000001c 	.word	0x2000001c

0800058c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/* Clear Pending Register */
	EXTI->PR |= 1<<4;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI4_IRQHandler+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI4_IRQHandler+0x1c>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6153      	str	r3, [r2, #20]
	/* Call IRQ */
	GP_IRQ_CallBack[4]();
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI4_IRQHandler+0x20>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	4798      	blx	r3
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if(EXTI->PR &= 1<<5) {	EXTI->PR |= 1<<5	; 	GP_IRQ_CallBack[5]()	;		}
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005ba:	f003 0320 	and.w	r3, r3, #32
 80005be:	6153      	str	r3, [r2, #20]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d008      	beq.n	80005d6 <EXTI9_5_IRQHandler+0x26>
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <EXTI9_5_IRQHandler+0xb8>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4798      	blx	r3
	if(EXTI->PR &= 1<<6) {	EXTI->PR |= 1<<6	; 	GP_IRQ_CallBack[6]()	;		}
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d008      	beq.n	80005f8 <EXTI9_5_IRQHandler+0x48>
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <EXTI9_5_IRQHandler+0xb8>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4798      	blx	r3
	if(EXTI->PR &= 1<<7) {	EXTI->PR |= 1<<7	; 	GP_IRQ_CallBack[7]()	;		}
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <EXTI9_5_IRQHandler+0x6a>
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a15      	ldr	r2, [pc, #84]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 800060e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000612:	6153      	str	r3, [r2, #20]
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <EXTI9_5_IRQHandler+0xb8>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4798      	blx	r3
	if(EXTI->PR &= 1<<8) {	EXTI->PR |= 1<<8	; 	GP_IRQ_CallBack[8]()	;		}
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 8000620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d008      	beq.n	800063c <EXTI9_5_IRQHandler+0x8c>
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <EXTI9_5_IRQHandler+0xb8>)
 8000638:	6a1b      	ldr	r3, [r3, #32]
 800063a:	4798      	blx	r3
	if(EXTI->PR &= 1<<9) {	EXTI->PR |= 1<<9	; 	GP_IRQ_CallBack[9]()	;		}
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 8000642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <EXTI9_5_IRQHandler+0xae>
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <EXTI9_5_IRQHandler+0xb4>)
 8000652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <EXTI9_5_IRQHandler+0xb8>)
 800065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40010400 	.word	0x40010400
 8000668:	2000001c 	.word	0x2000001c

0800066c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	if(EXTI->PR &= 1<<10) {	EXTI->PR |= 1<<10	; 	GP_IRQ_CallBack[10]()	;		}
 8000670:	4b33      	ldr	r3, [pc, #204]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a32      	ldr	r2, [pc, #200]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <EXTI15_10_IRQHandler+0x26>
 8000680:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <EXTI15_10_IRQHandler+0xd8>)
 800068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000690:	4798      	blx	r3
	if(EXTI->PR &= 1<<11) {	EXTI->PR |= 1<<11	; 	GP_IRQ_CallBack[11]()	;		}
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a2a      	ldr	r2, [pc, #168]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d008      	beq.n	80006b4 <EXTI15_10_IRQHandler+0x48>
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <EXTI15_10_IRQHandler+0xd8>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	4798      	blx	r3
	if(EXTI->PR &= 1<<12) {	EXTI->PR |= 1<<12	; 	GP_IRQ_CallBack[12]()	;		}
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <EXTI15_10_IRQHandler+0x6a>
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <EXTI15_10_IRQHandler+0xd8>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4798      	blx	r3
	if(EXTI->PR &= 1<<13) {	EXTI->PR |= 1<<13	; 	GP_IRQ_CallBack[13]()	;		}
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a19      	ldr	r2, [pc, #100]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d008      	beq.n	80006f8 <EXTI15_10_IRQHandler+0x8c>
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <EXTI15_10_IRQHandler+0xd8>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	4798      	blx	r3
	if(EXTI->PR &= 1<<14) {	EXTI->PR |= 1<<14	; 	GP_IRQ_CallBack[14]()	;		}
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 80006fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000702:	6153      	str	r3, [r2, #20]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <EXTI15_10_IRQHandler+0xae>
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6153      	str	r3, [r2, #20]
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <EXTI15_10_IRQHandler+0xd8>)
 8000716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000718:	4798      	blx	r3
	if(EXTI->PR &= 1<<15) {	EXTI->PR |= 1<<15	; 	GP_IRQ_CallBack[15]()	;		}
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d008      	beq.n	800073c <EXTI15_10_IRQHandler+0xd0>
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <EXTI15_10_IRQHandler+0xd4>)
 8000730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b03      	ldr	r3, [pc, #12]	; (8000744 <EXTI15_10_IRQHandler+0xd8>)
 8000738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800073a:	4798      	blx	r3
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40010400 	.word	0x40010400
 8000744:	2000001c 	.word	0x2000001c

08000748 <Get_CRLH_Postion>:
 * @param [in]	 : PinNumber -> Set Pin Number according to  @ref GPIO_PIN_define
 * @retval		 : Pin Position
 * Note			 : According to Number use reg. CRL or CRH
 */
static uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	2b80      	cmp	r3, #128	; 0x80
 8000756:	d042      	beq.n	80007de <Get_CRLH_Postion+0x96>
 8000758:	2b80      	cmp	r3, #128	; 0x80
 800075a:	dc11      	bgt.n	8000780 <Get_CRLH_Postion+0x38>
 800075c:	2b08      	cmp	r3, #8
 800075e:	d036      	beq.n	80007ce <Get_CRLH_Postion+0x86>
 8000760:	2b08      	cmp	r3, #8
 8000762:	dc06      	bgt.n	8000772 <Get_CRLH_Postion+0x2a>
 8000764:	2b02      	cmp	r3, #2
 8000766:	d02e      	beq.n	80007c6 <Get_CRLH_Postion+0x7e>
 8000768:	2b04      	cmp	r3, #4
 800076a:	d02e      	beq.n	80007ca <Get_CRLH_Postion+0x82>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d028      	beq.n	80007c2 <Get_CRLH_Postion+0x7a>
 8000770:	e047      	b.n	8000802 <Get_CRLH_Postion+0xba>
 8000772:	2b20      	cmp	r3, #32
 8000774:	d02f      	beq.n	80007d6 <Get_CRLH_Postion+0x8e>
 8000776:	2b40      	cmp	r3, #64	; 0x40
 8000778:	d02f      	beq.n	80007da <Get_CRLH_Postion+0x92>
 800077a:	2b10      	cmp	r3, #16
 800077c:	d029      	beq.n	80007d2 <Get_CRLH_Postion+0x8a>
 800077e:	e040      	b.n	8000802 <Get_CRLH_Postion+0xba>
 8000780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000784:	d033      	beq.n	80007ee <Get_CRLH_Postion+0xa6>
 8000786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800078a:	dc09      	bgt.n	80007a0 <Get_CRLH_Postion+0x58>
 800078c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000790:	d029      	beq.n	80007e6 <Get_CRLH_Postion+0x9e>
 8000792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000796:	d028      	beq.n	80007ea <Get_CRLH_Postion+0xa2>
 8000798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800079c:	d021      	beq.n	80007e2 <Get_CRLH_Postion+0x9a>
 800079e:	e030      	b.n	8000802 <Get_CRLH_Postion+0xba>
 80007a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a4:	d027      	beq.n	80007f6 <Get_CRLH_Postion+0xae>
 80007a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007aa:	dc03      	bgt.n	80007b4 <Get_CRLH_Postion+0x6c>
 80007ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007b0:	d01f      	beq.n	80007f2 <Get_CRLH_Postion+0xaa>
 80007b2:	e026      	b.n	8000802 <Get_CRLH_Postion+0xba>
 80007b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007b8:	d01f      	beq.n	80007fa <Get_CRLH_Postion+0xb2>
 80007ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007be:	d01e      	beq.n	80007fe <Get_CRLH_Postion+0xb6>
 80007c0:	e01f      	b.n	8000802 <Get_CRLH_Postion+0xba>
	{
	/* This Cases refer to CRL */
	case GPIO_PIN_0:
		return 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e01e      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	e01c      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80007ca:	2308      	movs	r3, #8
 80007cc:	e01a      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80007ce:	230c      	movs	r3, #12
 80007d0:	e018      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80007d2:	2310      	movs	r3, #16
 80007d4:	e016      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80007d6:	2314      	movs	r3, #20
 80007d8:	e014      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80007da:	2318      	movs	r3, #24
 80007dc:	e012      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80007de:	231c      	movs	r3, #28
 80007e0:	e010      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
		/* This Cases refer to CRH */
	case GPIO_PIN_8:
		return 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e00e      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	e00c      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80007ea:	2308      	movs	r3, #8
 80007ec:	e00a      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80007ee:	230c      	movs	r3, #12
 80007f0:	e008      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80007f2:	2310      	movs	r3, #16
 80007f4:	e006      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80007f6:	2314      	movs	r3, #20
 80007f8:	e004      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80007fa:	2318      	movs	r3, #24
 80007fc:	e002      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80007fe:	231c      	movs	r3, #28
 8000800:	e000      	b.n	8000804 <Get_CRLH_Postion+0xbc>
		break;
	}
	return 0;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <MCAL_GPIO_INIT>:
 * @retval		 : None
 * Note			 : STM32F103C6 MCU has GPIO A,B,c,D,E Modules
 * 					But LQFP48 has only GPIO A,B and Part of C,D as external Pins
 */
void MCAL_GPIO_INIT(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800080e:	b590      	push	{r4, r7, lr}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]
	/* Port Configuration Register low (GPIOx_CRL) Configure PINS From 0 >>> 7 */
	/* Port Configuration Register High (GPIOx_CRH) Configure PINS From 8 >>> 15 */
	volatile uint32_t *Config_Register = NULL;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
	uint8_t PINConf = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
	// Check Condition to Pin Number Chosen Found in High or Low
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d801      	bhi.n	800082c <MCAL_GPIO_INIT+0x1e>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	e001      	b.n	8000830 <MCAL_GPIO_INIT+0x22>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	60bb      	str	r3, [r7, #8]

	/* Clear CNF & Mode */
	(* Config_Register) &= ~(0xF << Get_CRLH_Postion(PinConfig->GPIO_PinNumber));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff86 	bl	8000748 <Get_CRLH_Postion>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	230f      	movs	r3, #15
 8000842:	4093      	lsls	r3, r2
 8000844:	43da      	mvns	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	401a      	ands	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	601a      	str	r2, [r3, #0]

	/* If Pin OutPut */
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD )
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d00b      	beq.n	8000870 <MCAL_GPIO_INIT+0x62>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	2b05      	cmp	r3, #5
 800085e:	d007      	beq.n	8000870 <MCAL_GPIO_INIT+0x62>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	2b06      	cmp	r3, #6
 8000866:	d003      	beq.n	8000870 <MCAL_GPIO_INIT+0x62>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	789b      	ldrb	r3, [r3, #2]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d10e      	bne.n	800088e <MCAL_GPIO_INIT+0x80>
	{
		/* Set CNF and MODE */
		/* Now Values are ready to write on CNF as 2nd(2bits) and Mode as 1st(2bits).
		 * Negtive 4 to Adjust the value in macro to be suit to the register.
		 */
		PINConf =( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	3b04      	subs	r3, #4
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	b25a      	sxtb	r2, r3
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	4313      	orrs	r3, r2
 8000882:	b25b      	sxtb	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e02c      	b.n	80008e8 <MCAL_GPIO_INIT+0xda>
	}

	else // Pin is Input
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_Analog || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <MCAL_GPIO_INIT+0x90>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	789b      	ldrb	r3, [r3, #2]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d107      	bne.n	80008ae <MCAL_GPIO_INIT+0xa0>
		{
			/* Set CNF and MODE */
			//Mode as (2bits) as default input mode = 0x00.
			PINConf = ( ((PinConfig->GPIO_MODE) << 2) & 0x0F);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e01c      	b.n	80008e8 <MCAL_GPIO_INIT+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	2b08      	cmp	r3, #8
 80008b4:	d102      	bne.n	80008bc <MCAL_GPIO_INIT+0xae>
		{
			PINConf = ( ((GPIO_MODE_INPUT_FLO) << 2) & 0x0F);
 80008b6:	2304      	movs	r3, #4
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e015      	b.n	80008e8 <MCAL_GPIO_INIT+0xda>
		}
		else // as PU or PD
		{
			PINConf = ( ((GPIO_MODE_INPUT_PU) << 2) & 0x0F);
 80008bc:	2308      	movs	r3, #8
 80008be:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d107      	bne.n	80008d8 <MCAL_GPIO_INIT+0xca>
			{
				// Table 20. Port bit configuration table set PxODR = 1 as input Pull Up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	8812      	ldrh	r2, [r2, #0]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	e007      	b.n	80008e8 <MCAL_GPIO_INIT+0xda>
			}
			else
			{
				// Table 20. Port bit configuration table set PxODR = 0 as input Pull Down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	8812      	ldrh	r2, [r2, #0]
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	401a      	ands	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Now we have value stored in PINConf as mode and CNF and having PIN number position so shift it until reach its place in the register.
	(*Config_Register) |=  (PINConf << Get_CRLH_Postion(PinConfig->GPIO_PinNumber)) ;
 80008e8:	7bfc      	ldrb	r4, [r7, #15]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff2a 	bl	8000748 <Get_CRLH_Postion>
 80008f4:	4603      	mov	r3, r0
 80008f6:	fa04 f203 	lsl.w	r2, r4, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	431a      	orrs	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bd90      	pop	{r4, r7, pc}

0800090c <Switch_CPU_AccessLevel>:
	privileged,
	unprivileged
};

void Switch_CPU_AccessLevel(enum CPU_AccessLevel LEVEL)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	switch(LEVEL)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <Switch_CPU_AccessLevel+0x16>
 800091c:	2b01      	cmp	r3, #1
 800091e:	d009      	beq.n	8000934 <Switch_CPU_AccessLevel+0x28>
		__asm("MRS R3, CONTROL \n\t" 		// Store value of Control register to R3
				"orr R3, R3, #0x01 \n\t" 	// Set bit 0
				"MSR CONTROL, R3"); 		// load R3 value to Control Register after edit value of bit 0
		break;
	}
}
 8000920:	e00f      	b.n	8000942 <Switch_CPU_AccessLevel+0x36>
		__asm("MRS R3, CONTROL 		\n\t"	// Store value of Control register to R3
 8000922:	f3ef 8314 	mrs	r3, CONTROL
 8000926:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800092a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800092e:	f383 8814 	msr	CONTROL, r3
		break;
 8000932:	e006      	b.n	8000942 <Switch_CPU_AccessLevel+0x36>
		__asm("MRS R3, CONTROL \n\t" 		// Store value of Control register to R3
 8000934:	f3ef 8314 	mrs	r3, CONTROL
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	f383 8814 	msr	CONTROL, r3
		break;
 8000940:	bf00      	nop
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <clk_init>:

//clk configuration
void clk_init()
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_EN();
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <clk_init+0x24>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <clk_init+0x24>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <clk_init+0x24>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <clk_init+0x24>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6193      	str	r3, [r2, #24]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <EXTI_CallBack>:

void EXTI_CallBack(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <EXTI_CallBack+0x14>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
	Switch_CPU_AccessLevel(privileged);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffc4 	bl	800090c <Switch_CPU_AccessLevel>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000058 	.word	0x20000058

0800098c <main>:

int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
	clk_init();
 8000992:	f7ff ffdb 	bl	800094c <clk_init>

	/* Set Configuration of EXTI */
	EXTI_Config_t EXTI_Conf;  // Make Variable of EXTI_PinConfig_t structure
	EXTI_Conf.EXTI_PIN = EXTI_LINE9_PB9; // Set line 9, GPIOB, Pin9 an EXTI
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <main+0x44>)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	ca07      	ldmia	r2, {r0, r1, r2}
 800099c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Conf.Trigger_Case = EXTI_Trigger_RASING; // Specifies Rising Trigger
 80009a0:	2300      	movs	r3, #0
 80009a2:	743b      	strb	r3, [r7, #16]
	EXTI_Conf.IRQ_Case =EXTI_IRQ_Enable; // Enable Interrupt Mask
 80009a4:	2301      	movs	r3, #1
 80009a6:	747b      	strb	r3, [r7, #17]
	EXTI_Conf.P_IRQ_CallBack = EXTI_CallBack; // Make Call Back Function point to ISR
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <main+0x48>)
 80009aa:	617b      	str	r3, [r7, #20]

	MCAL_EXTI_GPIO_Init(&EXTI_Conf);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd98 	bl	80004e4 <MCAL_EXTI_GPIO_Init>
	IRQ_Flag = 1;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <main+0x4c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]

	/* When Try to test our function first make it unprivileged
	 *  since main work as thread mode which is PAL */
	Switch_CPU_AccessLevel(unprivileged);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ffa6 	bl	800090c <Switch_CPU_AccessLevel>
	//Switch_CPU_AccessLevel(privileged);
	while(1)
	{
		if(IRQ_Flag == 1)
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <main+0x4c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d1fb      	bne.n	80009c0 <main+0x34>
		{
			IRQ_Flag = 0;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <main+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag == 1)
 80009ce:	e7f7      	b.n	80009c0 <main+0x34>
 80009d0:	08000a90 	.word	0x08000a90
 80009d4:	08000975 	.word	0x08000975
 80009d8:	20000058 	.word	0x20000058

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f000 f811 	bl	8000a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff ffbd 	bl	800098c <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a20:	08000aa4 	.word	0x08000aa4
  ldr r2, =_sbss
 8000a24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a28:	2000005c 	.word	0x2000005c

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <__libc_init_array>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	2500      	movs	r5, #0
 8000a34:	4e0c      	ldr	r6, [pc, #48]	; (8000a68 <__libc_init_array+0x38>)
 8000a36:	4c0d      	ldr	r4, [pc, #52]	; (8000a6c <__libc_init_array+0x3c>)
 8000a38:	1ba4      	subs	r4, r4, r6
 8000a3a:	10a4      	asrs	r4, r4, #2
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	d109      	bne.n	8000a54 <__libc_init_array+0x24>
 8000a40:	f000 f81a 	bl	8000a78 <_init>
 8000a44:	2500      	movs	r5, #0
 8000a46:	4e0a      	ldr	r6, [pc, #40]	; (8000a70 <__libc_init_array+0x40>)
 8000a48:	4c0a      	ldr	r4, [pc, #40]	; (8000a74 <__libc_init_array+0x44>)
 8000a4a:	1ba4      	subs	r4, r4, r6
 8000a4c:	10a4      	asrs	r4, r4, #2
 8000a4e:	42a5      	cmp	r5, r4
 8000a50:	d105      	bne.n	8000a5e <__libc_init_array+0x2e>
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a58:	4798      	blx	r3
 8000a5a:	3501      	adds	r5, #1
 8000a5c:	e7ee      	b.n	8000a3c <__libc_init_array+0xc>
 8000a5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a62:	4798      	blx	r3
 8000a64:	3501      	adds	r5, #1
 8000a66:	e7f2      	b.n	8000a4e <__libc_init_array+0x1e>
 8000a68:	08000a9c 	.word	0x08000a9c
 8000a6c:	08000a9c 	.word	0x08000a9c
 8000a70:	08000a9c 	.word	0x08000a9c
 8000a74:	08000aa0 	.word	0x08000aa0

08000a78 <_init>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr

08000a84 <_fini>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	bf00      	nop
 8000a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8a:	bc08      	pop	{r3}
 8000a8c:	469e      	mov	lr, r3
 8000a8e:	4770      	bx	lr
