
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000475  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000151  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036d  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000111  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	int i;
	DDRA = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
        for(i = 0; i< 8; i++)
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
		{
			SetBit(PORTA,i);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	50 e0       	ldi	r21, 0x00	; 0
			_delay_ms(1000);
		}	
		_delay_ms(2000);
		for(i = 7; i>=0; i--)
  9e:	67 e0       	ldi	r22, 0x07	; 7
  a0:	70 e0       	ldi	r23, 0x00	; 0
{
	int i;
	DDRA = 0xFF;
    while(1)
    {
        for(i = 0; i< 8; i++)
  a2:	e0 e0       	ldi	r30, 0x00	; 0
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	15 c0       	rjmp	.+42     	; 0xd2 <main+0x40>
		{
			SetBit(PORTA,i);
  a8:	ab b3       	in	r26, 0x1b	; 27
  aa:	ca 01       	movw	r24, r20
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x1e>
  b8:	8a 2b       	or	r24, r26
  ba:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9d e0       	ldi	r25, 0x0D	; 13
  c0:	a3 e0       	ldi	r26, 0x03	; 3
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x30>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3a>
  cc:	00 00       	nop
{
	int i;
	DDRA = 0xFF;
    while(1)
    {
        for(i = 0; i< 8; i++)
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	28 30       	cpi	r18, 0x08	; 8
  d4:	31 05       	cpc	r19, r1
  d6:	44 f3       	brlt	.-48     	; 0xa8 <main+0x16>
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	9a e1       	ldi	r25, 0x1A	; 26
  dc:	a6 e0       	ldi	r26, 0x06	; 6
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x4c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x56>
  e8:	00 00       	nop
		{
			SetBit(PORTA,i);
			_delay_ms(1000);
		}	
		_delay_ms(2000);
		for(i = 7; i>=0; i--)
  ea:	9b 01       	movw	r18, r22
		{
			ClearBit(PORTA,i);
  ec:	ab b3       	in	r26, 0x1b	; 27
  ee:	ca 01       	movw	r24, r20
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x66>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x62>
  fc:	80 95       	com	r24
  fe:	8a 23       	and	r24, r26
 100:	8b bb       	out	0x1b, r24	; 27
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9d e0       	ldi	r25, 0x0D	; 13
 106:	a3 e0       	ldi	r26, 0x03	; 3
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	a0 40       	sbci	r26, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x76>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x80>
 112:	00 00       	nop
		{
			SetBit(PORTA,i);
			_delay_ms(1000);
		}	
		_delay_ms(2000);
		for(i = 7; i>=0; i--)
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	9f ef       	ldi	r25, 0xFF	; 255
 11a:	2f 3f       	cpi	r18, 0xFF	; 255
 11c:	39 07       	cpc	r19, r25
 11e:	31 f7       	brne	.-52     	; 0xec <main+0x5a>
 120:	8f e7       	ldi	r24, 0x7F	; 127
 122:	9a e1       	ldi	r25, 0x1A	; 26
 124:	a6 e0       	ldi	r26, 0x06	; 6
 126:	81 50       	subi	r24, 0x01	; 1
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	a0 40       	sbci	r26, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x94>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x9e>
 130:	00 00       	nop
{
	int i;
	DDRA = 0xFF;
    while(1)
    {
        for(i = 0; i< 8; i++)
 132:	9f 01       	movw	r18, r30
 134:	ce cf       	rjmp	.-100    	; 0xd2 <main+0x40>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
