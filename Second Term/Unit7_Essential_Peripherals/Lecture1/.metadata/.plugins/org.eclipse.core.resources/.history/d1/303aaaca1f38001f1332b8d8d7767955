/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/* Abdelrahman Matarawy
 * 2/7/2024
 * Learn_In_Depth
 */
#include <stdio.h>

#define unit32_t 		 unsigned int
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Register Address ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
// RCC
#define RCC_BASE    	 0x40021000
#define RCC_APB2RSTR 	 *(volatile unit32_t *)(RCC_BASE + 0x18)
#define RCC_IOPAEN  	 (1<<2)
#define RCC_IOPBEN   	 (1<<3)

// GPIO
#define GPIOA_BASE  	 0x40010800
#define GPIOA_CRL 	 	 *(volatile unit32_t *)(GPIOA_BASE + 0x00)
#define GPIOA_CRH 	 	 *(volatile unit32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_IDR 	 	 *(volatile unit32_t *)(GPIOA_BASE + 0x08)
#define GPIOA_ODR 	 	 *(volatile unit32_t *)(GPIOA_BASE + 0x0C) //ODR -> Output data register


#define GPIOB_BASE  	 0x40010C00
#define GPIOB_CRL 	 	 *(volatile unit32_t *)(GPIOB_BASE + 0x00)
#define GPIOB_CRH 	 	 *(volatile unit32_t *)(GPIOB_BASE + 0x04)
#define GPIOA_IDR 	 	 *(volatile unit32_t *)(GPIOA_BASE + 0x08)
#define GPIOB_ODR 	 	 *(volatile unit32_t *)(GPIOB_BASE + 0x0C)


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CLOCK Init ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void clock_init(void)
{
	/* Enable clock GPIOA */
	RCC_APB2RSTR |= RCC_IOPAEN;
	/* Enable clock GPIOB */
	RCC_APB2RSTR |= RCC_IOPBEN;
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GPIOA Init ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void GPIO_init(void)
{
	//Reset values
	GPIOA_CRL = 0;
	GPIOA_CRH = 0;
	GPIOB_CRL = 0;
	GPIOB_CRH = 0;
	/* ~~~~~~~~~~~~~~~ GPIOA_PIN1 ~~~~~~~~~~~~~~~ */
	// 00: Input mode
	GPIOA_CRL &= ~(0b11<<4);
	// 01: Floating input
	GPIOA_CRL |= (0b01<<6);
	/* ~~~~~~~~~~~~~~~ GPIOA_PIN13 ~~~~~~~~~~~~~~~ */
	// 00: Input mode
	GPIOA_CRL &= ~(0b11<<20);
	// 01: Floating input
	GPIOA_CRH |= (0b01<<22);
	/* ~~~~~~~~~~~~~~~ GPIOB_PIN1 ~~~~~~~~~~~~~~~ */
	// 01: Output mode, max speed 10 MHz.
	GPIOB_CRL |= (0b01<<4);
	// 00: General purpose output push-pull
	GPIOB_CRL &= ~(0b11<<6);
	/* ~~~~~~~~~~~~~~~ GPIOB_PIN13 ~~~~~~~~~~~~~~~ */
	// 01: Output mode, max speed 10 MHz.
	GPIOB_CRL |= (0b01<<20);
	// 00: General purpose output push-pull
	GPIOB_CRL &= ~(0b11<<22);
}

int main(void)
{
	/* ~~~~~~~~~~~~~~~ Peripherals Init ~~~~~~~~~~~~~~~*/
	clock_init();
	GPIO_init();

	while(1)
	{
		/* In case Button on GPIOA_PIN1 pressed */
		if(((GPIOA_IDR & (1<<1)) >> 1 ) == 0)
		{
			/* Led on GPIOB_PIN1 will be ON */
			GPIOB_ODR ^= (1<<1);
			/* To Make Switch as single Press */
			while(( ( GPIOA_IDR & (1<<1) ) >> 1 ) == 0);
		}
		if(((GPIOA_IDR & (1<<13)) >> 13 ) == 1)
		{
			/* Led on GPIOB_PIN13 will be ON */
			GPIOB_ODR ^= (1<<13);
		}
	}
}


